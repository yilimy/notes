<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git忽略规则及.gitignore规则不生效的解决办法]]></title>
    <url>%2F2017%2Fgitignore-Effective-rules.html</url>
    <content type="text"><![CDATA[引子在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：1234567# 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件!lib.a # 但 lib.a 除外/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODObuild/ # 忽略 build/ 目录下的所有文件doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 处理方法规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：123git rm -r --cached .git add .git commit -m 'update .gitignore']]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-nexo主题配置中的问题]]></title>
    <url>%2F2017%2Fhexo-nexo-iss.html</url>
    <content type="text"><![CDATA[引子好久没写博客了，一时间发现作者更新了新版本，我就很自然的，拉取最新版本，然后合并自己本地的博客源码，解决了好几个文件的冲突。看似是解决好了，不料在我 hexo clean 、hexo g 操作时，出现了问题： 1234567891011121314151617181920212223242526272829303132333435363738$ hexo gERROR Script load failed: themes\next\scripts\tags\exturl.jsError: Cannot find module 'hexo-util' at Function.Module._resolveFilename (module.js:325:15) at Function.Module._load (module.js:276:25) at Module.require (module.js:353:17) at require (D:\myblog-hexo\node_modules\hexo\lib\hexo\index.js:213:21) at D:\myblog-hexo\themes\next\scripts\tags\exturl.js:7:12 at D:\myblog-hexo\node_modules\hexo\lib\hexo\index.js:229:12 at tryCatcher (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\util.js:16:23) at Promise._settlePromiseFromHandler (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:502:31) at Promise._settlePromise (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:559:18) at Promise._settlePromise0 (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:604:10) at Promise._settlePromises (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:683:18) at Promise._fulfill (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:628:18) at Promise._resolveCallback (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:423:57) at Promise._settlePromiseFromHandler (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:514:17) at Promise._settlePromise (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:559:18) at Promise._settlePromise0 (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:604:10) at Promise._settlePromises (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:683:18) at Promise._fulfill (D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\promise.js:628:18) at D:\myblog-hexo\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:42:21 at D:\myblog-hexo\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:78:16 at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3) 虽然这些错误不影响正常使用，不过有点强迫症的我，是不能接受的。查了一下百度，并没有发现和我相同问题的，结果厚着脸到作者源码仓库 iissnan/hexo-theme-next,发布了一个ISS，求解错误，得到热心的同学解答，现把自己解决方法记录下来！ 解决方案首先，错误列表反复提示 Error: Cannot find module &#39;hexo-util&#39; 这句，原来是加载 hexo-util 模块失败！接下来，就安装此模块命令行里打 npm install -- save-dev hexo-util 等待！、12345678910111213141516&gt; hexo-util@0.6.0 postinstall D:\myblog-hexo\node_modules\hexo-util&gt; npm run build:highlight&gt; hexo-util@0.6.0 build:highlight D:\myblog-hexo\node_modules\hexo-util&gt; node scripts/build_highlight_alias.js &gt; highlight_alias.jsonsave-dev@2.0.0 node_modules\save-devhexo-util@0.6.0 node_modules\hexo-util├── html-entities@1.2.0├── striptags@2.2.1├── bluebird@3.4.7├── highlight.js@9.9.0├── cross-spawn@4.0.2 (lru-cache@4.0.2, which@1.2.12)└── camel-case@3.0.0 (upper-case@1.1.3, no-case@2.3.1) 显示为此，说明模块安装成功再试 hexo clean 、hexo g 等操作，都正常了。总体来说，一般这些错误，都是模块的问题，知道了原理，再慢慢排查，就应该能解决相应的问题！~]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next-theme</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT主题配置备忘]]></title>
    <url>%2F2016%2Fhexo-next-theme-optimize.html</url>
    <content type="text"><![CDATA[2016年即将过去，在此整理一下hexo博客自己的改动，生命不息，折腾不体。我喜欢折腾，更享受用hexo写博。 NexT主题安装使用本地环境自行安装 git 和 Node.js 不会的可百度，安装方法一堆。 安装HexoGit 和 Node.js 都安装好后,首先创建一个用于存放博客文件的文件夹，如 blog，然后进入 blog 文件夹，下面开始安装并使用 Hexo。右键选择 Git Bash Here，弹出 Git Bash 窗口；执行命令：12$ npm install -g hexo-cli$ hexo init 安装完成后，指定文件夹的目录如下：1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中 _config.yml 文件用于存放网站的配置信息，你可以在此配置大部分的参数； scaffolds 是存放模板的文件夹，当新建文章时，Hexo 会根据 scaffold 来建立文件； source 是资源文件夹，用于存放用户资源， themes 是主题文件夹，存放博客主题， Hexo 会根据主题来生成静态页面。 在 Git Bash 终端执行命令：12$ hexo g$ hexo s Hexo将 source 文件夹中的Markdown 和 HTML 文件会被解析并放到 public 文件夹中， public 文件夹用于存放静态博客文件，相当于网站根目录。至此博客雏形基本完成，在浏览器中访问 http://localhost:4000/ ，就可以访问本地博客了。 使用NexT主题在 Git Bash 终端执行以下命令：1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 打开站点配置文件 _config.yml，找到 theme 字段，并将其值更改为 next 。1theme: next NexT主题是我用过的唯一的一款Hexo主题，界面简约，功能齐全且多样，响应式设计，电脑，手机访问效果很好。 在 Git Bash 终端执行命令 hexo s ，在浏览器中访问 http://localhost:4000/ ，可以看到默认的NexT-Muse主题。 我喜欢双栏的故使用 NexT.Pisces 主题，修改主题配置文件 _config.yml的 Schemes 字段的值为：1scheme: Pisces Next主题宽度调节现在一般都用宽屏显示器，博客页面两侧留白太多，调整一下宽度。打开 \themes\next\source\css\_common\components\post\post-expand.styl 文件，找到1@media (max-width: 767px) 改为1@media (max-width: 1080px) 打开 \themes\next\source\css\ _variables\base.styl 文件，找到123$main-desktop = 960px$main-desktop-large = 1200px$content-desktop = 700px 修改 $main-desktop 和 $content-desktop 的数值：123$main-desktop = 1080px$main-desktop-large = 1200px$content-desktop = 810px Next.Mist 主题的文章宽度至此改完了。如果你用的是 Next.Pisces，还需要继续修改。打开 \themes\next\source\css\_schemes\Pisces\_layout.styl 文件，将第 4 行的 width改为1080px ，修改后如下：1234.header &#123; position: relative; margin: 0 auto; width: 1080px; 记录一下我常用的细节改动，参考了许多博友的设置，并不是我的原创。参考网站，会在文章最底部列出，以示谢意。 修改文章内链接文本样式将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。修改文件 themes\next\source\css\_common\components\post\post.styl ，添加如下css样式，：1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式。 文章底部的那个带#号的标签文章底部的那个带#号的标签，比如#NexT，可以把#换成图标吗，怎么设置?修改模板 layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 首页展示文章动画效果和图片放大镜效果关闭哪改？文章动画效果关闭：主题配置里 Motion: 改为 false 关闭图片放大镜效果: 主题配置里 fancybox: 改为 false hexo背景动态效果和心心博客背景动态效果图和点击小红心效果的相关设置。把 js 文件 love.js 和 particle.js 放在 \themes\next\source\js\src 文件目录下更新 \themes\next\layout\_layout.swig 文件，在末尾（在前面引用会出现找不到的bug）添加以下 js 引入代码：1234&lt;!-- 背景动画 --&gt;&lt;script type="text/javascript" src="/js/src/particle.js"&gt;&lt;/script&gt;&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 想设置动画线条颜色可改为：1&lt;script type="text/javascript" color="255,0,0" opacity="0.3" count="99" src="particle.js"&gt;&lt;/script&gt; 就能显示红色。或者用：1&lt;script type="text/javascript" src="/js/src/particles.js" count="50" zindex="-2" opacity="1" color="0,104,183"&gt;&lt;/script&gt; 两个JS下载为：12http://7u2ss1.com1.z0.glb.clouddn.com/love.jshttp://7u2ss1.com1.z0.glb.clouddn.com/particle.js hexo NexT主题首页title的优化更改 index.swig 文件，文件路径是 your-hexo-site\themes\next\layout ，将下面代码1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改成1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 这时候你的首页标题会更符合网站名称 - 网站描述这习惯。进阶，做了 seo 优化，把关键词也显示在 Title 标题里，可改成1&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 注意：别堆砌关键字，整个标题一般不超过 80 个字符，可以通过chinaz的seo综合查询检查。 每篇文章末尾统一添加“本文结束”标记新建 passage-end-tag.swig 文件在路径 \themes\next\layout\_macro 中添加 passage-end-tag.swig 文件，其内容为：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢阅读------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 修改 post.swig 文件在 \themes\next\layout\_macro\post.swig 中， post-body 之后， post-footer 之前添加如下代码（post-footer之前两个DIV）：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 在主题配置文件中添加字段在主题配置文件 _config.yml 中添加以下字段开启此功能：123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 完成以上设置之后，在每篇文章之后都会添加“本文结束”标记。 增加HIGH一下功能在 themes\next\layout\_macro 目录下增加 high.swig 文件，我已改为歌曲循环和多次点击不重复！地址为:1http://7u2ss1.com1.z0.glb.clouddn.com/high-xunhuan.swig 打开这个地址，复制全部内容，在你本地新建high.swig 文件。打开\themes\next\layout\_macro\sidebar.swig文件，打开，在1234&lt;a href="&#123;&#123; url_for(theme.rss) &#125;&#125;" target="_blank" rel="alternate"&gt; &lt;i class="fa fa-rss"&gt;&lt;/i&gt; RSS&lt;/a&gt; 后边加入：1&#123;% include 'high.swig' %&#125; 如：123456789&#123;% if theme.rss %&#125; &lt;div class="feed-link motion-element"&gt; &lt;a href="&#123;&#123; url_for(theme.rss) &#125;&#125;" rel="alternate"&gt; &lt;i class="fa fa-rss"&gt;&lt;/i&gt; RSS &lt;/a&gt; &#123;% include 'high.swig' %&#125; &lt;/div&gt; &#123;% endif %&#125; 接着在主题配置文件 _config.yml ，加入：12highqilai: enabled: true 然后打开自定义CSS： \themes\next\source\css\_custom\custom.styl 加入1.feed-link a&#123;display: inline-block;&#125; 保存，hexo clean ， hexo g , hexo s 查看效果！主页 High 起来，摇动。改动方法！themes\next\layout\_layout.swig前添加：1&lt;link href="http://7u2ss1.com1.z0.glb.clouddn.com/harlem-shake-style.css" rel="stylesheet" type="text/css" /&gt; 地址改为你自己的CSS。失效了不怪！如果只是想当播放器听歌的话改 high.swig 文件内容为：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;a title="收藏到书签，偶尔High一下^_^" rel="alternate" class="mw-harlem_shake_slow wobble shake" href='javascript:( /* * Copyright (C) 2015 Rocko (rocko.xyz) &lt;rocko.zxp@gmail.com&gt; * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ function go() &#123; var songs = [ "http://7u2ss1.com1.z0.glb.clouddn.com/%E9%AB%98%E6%A2%A8%E5%BA%B7%E6%B2%BB%20-%20%E5%AD%A4%E7%8B%AC.mp3", "http://7u2ss1.com1.z0.glb.clouddn.com/one%20by%20one.mp3", "http://7u2ss1.com1.z0.glb.clouddn.com/Enya%20-%20Only%20Time.mp3", "http://7u2ss1.com1.z0.glb.clouddn.com/Enya%20-%20May%20It%20Be.mp3", "......" ]; function S() &#123; var e = document.getElementById("audio_element_id"); if(e != null)&#123; var index = parseInt(e.getAttribute("curSongIndex")); if(index &gt; songs.length - 2) &#123; index = 0; &#125; else &#123; index++; &#125; e.setAttribute("curSongIndex", index); &#125; e.src = i; e.play() &#125; function initAudioEle() &#123; var e = document.getElementById("audio_element_id"); if(e === null)&#123; e = document.createElement("audio"); e.setAttribute("curSongIndex", 0); e.id = "audio_element_id"; e.loop = false; e.bgcolor = 0; e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;"; document.body.appendChild(e); e.addEventListener("ended", function() &#123; go(); &#125;, true); &#125; &#125; initAudioEle(); var curSongIndex = parseInt(document.getElementById("audio_element_id").getAttribute("curSongIndex")); var i = songs[curSongIndex]; S(); &#125;)()'&gt; &lt;i class="fa fa-music"&gt;&lt;/i&gt; 听音乐&lt;/a&gt; 作者头像变成圆形打开自定义CSS： \themes\next\source\css\_custom\custom.styl 加入1234567.site-author-image &#123; border-radius: 100%; padding: 2px; border: 2px dashed #fff; animation: cycle 2s 0.5s forwards; transition: border-radius 2s;&#125; 博主名字号大小,也在 custom.styl 文件:123.site-author-name &#123; font-size: 16px;&#125; 动态title改动先看代码如下： 1234567891011121314151617&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~ | 量子广告！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好了~' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125; &#125;); 做为JS引用时，可以直接将上面代码保存为XXX.js，然后引用。在 \themes\next\layout\_layout.swig 最下边引用加入：12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/duoshuoshuo.js"&gt;&lt;/script&gt; hexo站点添加sitemap网站地图安装hexo的sitemap网站地图生成插件进入 hexo 根目录，打开 git12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在你的hexo站点的_config.yml添加下面的代码，注意缩进格式！12345# hexo sitemap网站地图sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 配置成功后hexo编译时会在hexo站点根目录生成sitemap.xml和baidusitemap.xml其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。其次，在robots.txt中添加下面的一段代码：12Sitemap: http://你的域名/sitemap.xmlSitemap: http://你的域名/baidusitemap.xml 请自行改成自己的网站。 多说评论不稳定，加载速度慢怎么办？把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig 。文件路径： X:\myblog-hexo\themes\next\layout\_scripts\third-party\comments将1(document.getElementsByTagName('head')[0] 修改成下面的代码1(document.getElementById('footer') 给 Github 添加 README默认情况下， Github 中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。正确的解决方法其实很简单：把 README.md 文件的后缀名改成 MDOWN 然后扔到 blog/source 文件夹下即可，这样 hexo 不会解析， Github 也会将其作为MD文件解析。 代码块自定义样式``内的打开自定义CSS： \themes\next\source\css\_custom\custom.styl 加入123456789101112131415// 代码块自定义样式``内的code &#123; color: #fc6423; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 博客部署的message\node_modules\hexo-deployer-git\lib\deployer.js 文件末尾找到这一句：1Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;. 改得个性化一点：1这个勤奋的家伙又更新了: &#123;&#123; now(\'YYYY-MM-DD HH:mm:ss\') &#125;&#125;. 博文置顶修改 hexo-generator-index 插件替换文件：node_modules/hexo-generator-index/lib/generator.js为：12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 设置文章置顶在文章 Front-matter 中添加 top 值，数值越大文章越靠前，如：1234567---title: Hexo+nexT主题配置备忘date: 2016-12-14 11:49:33tags: [Hexo,next-theme,Seo]categories: 学习笔记top: 10--- NexT主题自定义面页无序列表样式打开自定义CSS： \themes\next\source\css\_custom\custom.styl 加入：123ul &#123;list-style-type: circle; // 空心圆，实心圆为 disc&#125; 以上是我用到的细节改变，并不一定适合你，请选择改动！部分内容来自以下博客：务虚笔记小桥流水人家Jing’s BlogDoublemine岁月如歌胡闹的日子Never_yu’s Blog 未列完全，有些实在是找不到地址了，同样感谢。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Seo</tag>
        <tag>next-theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Seo优化搜索排名]]></title>
    <url>%2F2016%2Fhexo-optimize-seo.html</url>
    <content type="text"><![CDATA[首页title优化更改index.swig文件(your-hexo-site\themes\next\layout);将下面这段代码1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改成1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 这时候你的首页会更符合网站名称 - 网站描述这习惯。进阶，做了seo优化，把关键词也显示在title标题里，可改成： 1&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 让你的关键字出现在title标题里注意： 关键字出现在title标题里是有利于seo优化的，前提是你的目标关键词已经确定好。如果确定好的话，尽可能让它们在title标题尽量靠前，同时标题总字数注意控制在80个字符以内，切勿堆砌关键字。title的标点符号：关键词分割符号英文半角逗号，_ | ;品牌与关键词分割符号 - 给你的hexo站点添加sitemap网站地图 安装hexo的sitemap网站地图生成插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在你的hexo站点的_config.yml添加下面的代码(注意缩进格式) 12345# hexo sitemap网站地图sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 配置成功后，hexo编译时会在hexo站点根目录生成sitemap.xml和baidusitemap.xml其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。其次，在robots.txt中添加下面的一段代码： 12Sitemap: http://yoursite.com/sitemap.xmlSitemap: http://yoursite.com/baidusitemap.xml 请自行改成自己的网站。 给你的hexo网站添加蜘蛛协议robots.txt可以参考我的robots.txt，代码如下123456789101112131415161718# hexo robots.txtUser-agent: *Allow: /Allow: /archives/Allow: /tags/Allow: /guestbook/Allow: /links/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://blog.ynxiu.com/sitemap.xmlSitemap: http://blog.ynxiu.com/baidusitemap.xml 把robots.txt放在你的hexo站点的source文件下即可。 然后hexo g -d or hexo d -g提交一下，指的是生成后马上部署站点。 注册Google Search Console 链接：https://www.google.com/webmasters/ 根据提示注册好之后，添加你的博客域名。 然后点击你的域名进入。 测试robots.txt 点击左侧的robots.txt测试工具，根据提示提交你的robots.txt。注意要0错误才可以，如果有错误的话，会有提示，改正确就可以了。 提交站点地图还记得我们刚才创建创建sitemap.xml文件吧，点击左侧工具栏的站点地图。然后点右上角的添加/测试站点地图。输入sitemap先点测试，如果没问题的话，再提交。 Google 抓取方式提交站点地图之后，点击左侧的Google 抓取方式在这里我们填上我们需要抓取的url,不填这表示抓取首页，抓取方式可以选择桌面，智能手机等等，自行根据需要选择。填好url之后，点击抓取。然后可能会出现几种情况，如:完成、部分完成、重定向等，自由这三种情况是可以提交的。提交完成后，提交至索引，根据提示操作就可以了。比如：下边的页面，也可以是文章的地址~~12345archives/tags/guestbook/links/about/ 到此Google收录提交方式完成。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Google</tag>
        <tag>Seo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暂存git stash 命令]]></title>
    <url>%2F2016%2FGit-stash-xiangjie.html</url>
    <content type="text"><![CDATA[当在一个分支的开发工作未完成，却又要切换到另外一个分支进行开发的时候，除了commit原分支的代码改动的方法外，我觉得git stash是一个更加便捷的选择。步骤如下： 添加改动到stash。在原分支 git stash save -a &quot;messeag&quot;，网上很多很多资料都没有加 -a 这个option选项，我想他们的代码开发可能都是在原代码上进行修改吧。而对于在项目里加入了代码新文件的开发来说，-a选项才会将新加入的代码文件同时放入暂存区。 恢复改动。如果你要恢复的是最近的一次改动，git stash pop即可，我用这个用的最多。如果有多次stash操作，那就通过git stash list查看stash列表，从中选择你想要pop的stash，运行命令git stash pop stash@{id}或者git stash apply stash@{id}即可。这方面网上的资料挺多的。 删除stash。git stash drop &lt;stash@{id}&gt; 如果不加stash编号，默认的就是删除最新的，也就是编号为0的那个，加编号就是删除指定编号的stash。git stash clear是清除所有stash,整个世界一下子清净了！ git stash pop 与 git stash apply &lt;stash@{id}&gt; 的区别。 当我使用git stash pop和 git stash apply 几次以后，我发现stash list 好像比我预计的多了几个stash。于是我便上网去了解了一下这两个命令的区别。原来git stash pop stash@{id}命令会在执行后将对应的stash id 从stash list里删除，而git stash apply stash@{id} 命令则会继续保存stash id。对于有点强迫症的我来说，是容不下越来越多的陈旧stash id 仍然存在的，所以我更习惯于用git stash pop命令。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT主题自定义面页无序列表样式]]></title>
    <url>%2F2016%2Fnext-aboutlist.html</url>
    <content type="text"><![CDATA[原文请看感谢@weeson大神提供的方法。不知道是什么原因，自定义页面列表都没有样式。很不方便。修改方法如下解决about等页面无序列表不显示小圆圈问题在样式文件的blog\themes\next\source\css_custom文件夹下找到custom.styl文件 加入：123ul &#123;list-style-type: disc;&#125; 以上为实心圆，如需要调整到和文章页面相同的空心圆，修改为：123ul &#123;list-style-type: circle;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>NexT主题</tag>
        <tag>样式</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git中的.gitignore的语法规范]]></title>
    <url>%2F2016%2FGit-gitignore-yufa.html</url>
    <content type="text"><![CDATA[当我们需要将一个项目提交到Git时，并不是所有的文件都需要提交，比如一些自动生成的文件，这时候就可以使用.gitignore来忽略一些不需要提交的文件，本文着重介绍一下.gitignore的配置语法。 创建由于Windows下创建文件必须键入文件名，而要创建的.gitignore是没有文件名的，所以我们可以使用move命令来实现，打开Git Bash ，使用 mv gitignore .gitignore，然后可以编辑器编辑这个文件。 语法规范 空行或是以#开头的行即注释行将被忽略。 可以在前面添加正斜杠/来避免递归,下面的例子中可以很明白的看出来与上一个的区别。 可以在后面添加正斜杠/来定义文件夹，例如build/。 可以使用!来否定忽略，即比如在前面用了*.apk，然后使用!a.apk，则这个a.apk不会被忽略。 *用来匹配零个或多个字符，如*.[oa]忽略所有以”.o”或”.a”结尾，*~忽略所有以~结尾的文件（这种文件通常被许多编辑器标记为临时文件）；[]用来匹配括号内的任一字符，如[abc]，也可以在括号内加连接符，如[0-9]匹配0至9的数；?用来匹配单个字符。看了这么多，还是应该来个例子： 1234567891011121314151617# no .a files*.a# but do track lib.a, even though you're ignoring .a files above!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all files in the build/ directorybuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directorydoc/**/*.pdf 更多gitignore格式请参考：gitignore collection on github The Ignoring Files chapter of the Pro Git book]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何看明白diff]]></title>
    <url>%2F2016%2Fhow-to-read-diff.html</url>
    <content type="text"><![CDATA[它用来比较两个文本文件的差异，是代码版本管理的基石之一。你在命令行下，输入： $ diff &lt;变动前的文件&gt; &lt;变动后的文件&gt; diff的三种格式由于历史原因，diff有三种格式： 正常格式（normal diff）上下文格式（context diff）合并格式（unified diff） 接下来请看具体示例。 示例文件为了便于讲解，先新建两个示例文件。第一个文件叫做f1，内容是每行一个a，一共7行。1234567 a a a a a a a 第二个文件叫做f2，修改f1而成，第4行变成b，其他不变。1234567 a a a b a a a 正常格式的diff现在对f1和f2进行比较： $ diff f1 f2这时，diff就会显示正常格式的结果：12345 4c4 &lt; a --- &gt; b &gt; 第一行是一个提示，用来说明变动位置。4c4它分成三个部分：前面的”4”，表示f1的第4行有变化；中间的”c”表示变动的模式是内容改变（change），其他模式还有”增加”（a，代表addition）和”删除”（d，代表deletion）；后面的”4”，表示变动后变成f2的第4行。第二行分成两个部分。&lt; a前面的小于号，表示要从f1当中去除该行（也就是第4行），后面的”a”表示该行的内容。第三行用来分割f1和f2。---第四行，类似于第二行。\&gt; b前面的大于号表示f2增加了该行，后面的”b”表示该行的内容。最早的Unix（即AT&amp;T版本的Unix），使用的就是这种格式的diff。 上下文格式的diff上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。它的使用方法是加入c参数（代表context）。$ diff -c f1 f2显示结果如下：12345678910111213141516171819 *** f1 2012-08-29 16:45:41.000000000 +0800 --- f2 2012-08-29 16:45:51.000000000 +0800 *************** *** 1,7 **** a a a !a a a a --- 1,7 ---- a a a !b a a a 这个结果分成四个部分。第一部分的两行，显示两个文件的基本情况：文件名和时间信息。12 *** f1 2012-08-29 16:45:41.000000000 +0800 --- f2 2012-08-29 16:45:51.000000000 +0800 “*“表示变动前的文件，”—“表示变动后的文件。第二部分是15个星号，将文件的基本情况与变动内容分割开。1 *************** 第三部分显示变动前的文件，即f1。12345678 *** 1,7 **** a a a !a a a a 这时不仅显示发生变化的第4行，还显示第4行的前面三行和后面三行，因此一共显示7行。所以，前面的*** 1,7 ****就表示，从第1行开始连续7行。另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动；如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增。第四部分显示变动后的文件，即f2。12345678 --- 1,7 ---- a a a !b a a a 除了变动行（第4行）以外，也是上下文各显示三行，总共显示7行。 合并格式的diff如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了”合并格式”的diff，将f1和f2的上下文合并在一起显示。它的使用方法是加入u参数（代表unified）。 $ diff -u f1 f2 显示结果如下：1234567891011 --- f1 2012-08-29 16:45:41.000000000 +0800 +++ f2 2012-08-29 16:45:51.000000000 +0800 @@ -1,7 +1,7 @@ a a a -a +b a a a 它的第一部分，也是文件的基本信息。12 --- f1 2012-08-29 16:45:41.000000000 +0800 +++ f2 2012-08-29 16:45:51.000000000 +0800 “—“表示变动前的文件，”+++”表示变动后的文件。第二部分，变动的位置用两个@作为起首和结束。 @@ -1,7 +1,7 @@前面的”-1,7”分成三个部分：减号表示第一个文件（即f1），”1”表示第1行，”7”表示连续7行。合在一起，就表示下面是第一个文件从第1行开始的连续7行。同样的，”+1,7”表示变动后，成为第二个文件从第1行开始的连续7行。第三部分是变动的具体内容。12345678 a a a -a +b a a a 除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做”合并格式”。每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。 git格式的diff版本管理系统git，使用的是合并格式diff的变体。 $ git diff 显示结果如下：12345678910111213 diff --git a/f1 b/f1 index 6f8a38c..449b072 100644 --- a/f1 +++ b/f1 @@ -1,7 +1,7 @@ a a a -a +b a a a 第一行表示结果为git格式的diff。 diff --git a/f1 b/f1 进行比较的是，a版本的f1（即变动前）和b版本的f1（即变动后）。第二行表示两个版本的git哈希值（index区域的6f8a38c对象，与工作目录区域的449b072对象进行比较），最后的六位数字是对象的模式（普通文件，644权限）。index 6f8a38c..449b072 100644第三行表示进行比较的两个文件。12 --- a/f1 +++ b/f1 “—“表示变动前的版本，”+++”表示变动后的版本。后面的行都与官方的合并格式diff相同。123456789 @@ -1,7 +1,7 @@ a a a -a +b a a a 本文引用于一峰的文章]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>命令</tag>
        <tag>diff</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT主题'留言'页面增加最近访客]]></title>
    <url>%2F2016%2Fduoshuo-fangke.html</url>
    <content type="text"><![CDATA[功能在NexT主题上增加留言板的功能。 实现方法在菜单中添加guestbook修改主题配置文件_config.yml（要注意是NexT目录下的_config.yml，不是hexo站点目录下的_config.yml），即hexo初始化目录下的/themes/next/_config.yml，添加 guestbook 到 menu 中: 12345678menu: home: / #categories: /categories about: /about archives: /archives tags: /tags #commonweal: /404.html guestbook: /guestbook 这样就在网站menu中增加了一个菜单：guestbook，此时留言板还没有真的实现。 添加对应译文显示 修改NexT主题zh-Hans.yml文件（我用的是简体中文的，其他语言也是类似的），即hexo初始化目录下/themes/next/languages/zh-Hans.yml，添加 guestbook: 留言 到 menu 中123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 guestbook: 留言 这样在网站上就可以显示中文留言两个字。 新建guestbook页面新建guestbook页面，查看官方方法一样新建guestbook，在hexo初始化目录下，右键选择Git Bash Here。 执行hexo new page &quot;guestbook&quot;。此时会在hexo初始化目录下的/source中看到名为guestbook的文件夹，在index.md中添加comments: true如12345---title: guestbookdate: 2016-03-11 22:42:56comments: true--- 添加最近访客（多说插件）修改guestbook目录下的index.md,在正文部分添加12&gt; 最近访客&lt;div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"&gt;&lt;/div&gt; 修改多说CSS登陆多说，点击后台管理，选择设置，向下找到自定义CSS，插入如下代码，滑到最底部点击保存即可。12345678910111213141516171819#ds-reset .ds-avatar img,#ds-recent-visitors .ds-avatar img &#123; width: 54px; height: 54px; /*設置圖像的長和寬，這裏要根據自己的評論框情況更改*/ border-radius: 27px; /*設置圖像圓角效果,在這裏我直接設置了超過width/2的像素，即為圓形了*/ -webkit-border-radius: 27px; /*圓角效果：兼容webkit瀏覽器*/ -moz-border-radius: 27px; box-shadow: inset 0 -1px 0 #3333sf; /*設置圖像陰影效果*/ -webkit-box-shadow: inset 0 -1px 0 #3333sf;&#125;#ds-recent-visitors .ds-avatar &#123; float: left&#125;/*隱藏多說底部版權*/#ds-thread #ds-reset .ds-powered-by &#123; display: none;&#125; 本文转载自： 万物博客]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>多说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何进行远程版本回退]]></title>
    <url>%2F2016%2Fhow-git-version-rollback.html</url>
    <content type="text"><![CDATA[如果远程只有一个master分支,请你创建一个非master分支,然后推送到远程。同时也是备份一下master分支。 12git branch the_master_backupgit push origin the_master_backup 此时你查看远程分支应该有两个 master和the_master_backup设置默认的分支为 the_master_backup123git branch -D branch_name //删除本地master分支git push :master //推送一个空分支,相当于删除远程master分支 删除远程分支如何删除远程 Master 分支,为什么要删除远程 master 分支?请看这里!然后 操作步骤然后你在the_master_backup分支上 回滚到你要回滚的commit_id,然后重建master分支并推送到远程,顺便删除the_master_backup分支(包括远程the_master_backup分支)。1234567891011git checkout the_master_backupgit reset --hard commit_idgit branch master //重新创建master分支git push origin master //重新推送master分支git branch -D the_master_backup //删除本地the_master_backup分支git push origin :the_master_backup//删除远程the_master_backup分支 总结过程12345678910111213git checkout the_branchgit pullgit branch the_branch_backup //备份一下这个分支当前的情况,如果你开始执行过，这一步可以省略。git reset --hard the_commit_id //把the_branch本地回滚到the_commit_idgit push origin :the_branch //删除远程 the_branchgit push origin the_branch //用回滚后的本地分支重新建立远程分支git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支 本文引用于大海的文章]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>命令</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将hexo博客同时托管到github和coding]]></title>
    <url>%2F2016%2Fhexo-github-and-coding.html</url>
    <content type="text"><![CDATA[生命在于折腾！ hexo博客的安装和使用本文不再讲述。见文章：用hexo建博客 在coding和github上建立pages项目，按要求建立。不会的自行百度。 配置_config.yml想要把博客同时部署到coding和github上，关键一步就是_config.yml配置。 根据Hexo官方文档需要修改成下面的形式123456deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] gitcafe: &lt;repository url&gt;,[branch] 所以我的是这样：12345deploy: type: git repo: coding: git@git.coding.net:xxx/xxx.git,master github: git@github.com:xxx/xxx.github.io.git,master 我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。 部署最后使用部署命令就能把博客同步到coding和github上面：12hexo ghexo d 以上只是把hexo生成的静态文件部署到coding和github的master分支上。稍等片刻就能用系统给的地址访问到你的博客。 源文件的备份。 如果以后换了工作环镜，电脑也更换了，要如何备份源文件呢。这里我使用了git的支分特性。 在hexo本地客博根目录打开git bash使用：1git init 添加 coding和github远程仓库12git remote add origin xxx/xxx.git coding仓库地址git remote add github xxx/xxx.git github仓库地址 因为hexo博客生成时自带了.gitignore文件，无需担心不必要的文档被git管理。 因为编译后的文件对应的是coding和github的master分支，所以我们把源文件push到其它分支如：coding-pages分支。然后执行:1git checkout -b coding-pages 这时当前分支为coding-pages 接着git add -A ， git commit -m &quot;注释&quot; 然后分别Push到coding和github的coding-pages分支上12git push origin coding-pagesgit push github coding-pages 以上是我手动同步到coding和github的方法。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>命令</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用hexo建博客]]></title>
    <url>%2F2016%2Fhexo-you-blog.html</url>
    <content type="text"><![CDATA[如果你对默认配置满意，只需几个命令便可秒搭一个hexo。如果你跟我一样喜欢折腾下，30分钟也足够个性化。如果你过于喜欢折腾，可以折腾个把星期，尽情的玩。 搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。 只需要几个简单命令，你就可以完成一切。123hexo n #写文章hexo g #生成hexo d #部署 # 可与hexo g合并为 hexo d -g 下面逐步介绍，进入正题。 环境准备安装Node到Node.js官网下载相应平台的最新版本，一路安装即可。安装Git我用的是msysgit.安装过程网上一堆，很简单。 GitHub或coding GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。没有的自行百度。 添加SSH-Key首先设置你的用户名密码：12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" 生成密钥：1ssh-keygen -t rsa -C "email@example.com" 想简单，过程一路回车。12345678ssh-keygen -t rsa -C "your_email@youremail.com" 你的email帐户Generating public/private rsa key pair.Enter file in which to save the key (/c/Documents and Settings/Administrator/.ssh/id_rsa): （设置保存公钥和私钥的位置，保持默认，可以不填直接回车）Enter passphrase (empty for no passphrase): （读取id_rsa的密码，可不填，不过建议填写）Enter same passphrase again: （再次输入id_rsa密码确认）Your identification has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.Your public key has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.pub.The key fingerprint is:生成的KEY 你的email帐户 上述命令若执行成功，会在c/Documents and Settings/Administrator/.ssh/目录下生成两个文件id_rsa和id_rsa.pub，最后两步： 用文本编辑器打开id_rsa.pub文件，拷贝其中的内容，将其添加到Add SSH Key 不会添加的百度一下，这里不再说了。 最后可以验证一下：1ssh -T git@github.com 顺利的话可以看到下面的信息 Hi lvshutao! You’ve successfully authenticated, but GitHub does not provide shell access. 安装Node和Git都安装好后，可执行如下命令安装hexo：1npm install -g hexo 初始化然后，执行init命令初始化hexo到你指定的目录：1hexo init &lt;folder&gt; 也可以cd到目标目录，执行hexo init。 好啦，至此，全部安装工作已经完成！ 生成静态页面cd到你的init目录，执行如下命令，生成静态页面至hexo\public\目录。1hexo generate 命令必须在init目录下执行，否则不成功，但是也不报错。当你修改文章Tag或内容，不能正确重新生成内容，可以删除hexo\db.json后重试，还不行就到public目录删除对应的文件，重新生成。 本地启动执行如下命令，启动本地服务，进行文章预览调试。1hexo server 浏览器输入http://localhost:4000就可以看到效果。 请使用高级浏览器，否则可能…你懂的！ 写文章执行new命令，生成指定名称的文章至hexo\source\_posts\postName.md。1hexo new [layout] "postName" #新建文章 其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md1234title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:--- 请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。 我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：12345title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;categories: tags: --- postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。 注意，所有文件：后面都必须有个空格，不然会报错。 看一下刚才生成的文件hexo\source\_posts\postName.md，内容如下：123456title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: #文章分类目录，可以为空，注意:后面有个空格tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格---这里开始使用markdown格式输入你的正文。 接下来，你就可以用喜爱的编辑器尽情书写你的文章。Markdown 语法说明。 文章摘要在需要显示摘要的地方添加如下代码即可：123以上是摘要&lt;!--more--&gt;以下是余下全文 more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。 hexo中所有文件的编码格式均是UTF-8。 主题安装本文以Next主题为例，安装主题的方法就是一句git命令： 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： 12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 安装完成后，打开hexo_config.yml，修改主题为NexT1theme: NexT 打开hexo\themes\modernist目录，编辑主题配置文件_config.yml：1234567891011121314151617181920212223242526272829menu: #配置页头显示哪些菜单# Home: / Archives: /archives Reading: /reading About: /about# Guestbook: /aboutexcerpt_link: Read More #摘要链接文字archive_yearly: false #按年存档widgets: #配置页脚显示哪些小挂件 - category# - tag - tagcloud - recent_posts# - blogrollblogrolls: #友情链接 - bruce sha's duapp wordpress: http://ibruce.duapp.com - bruce sha's javaeye: http://buru.iteye.com - bruce sha's oschina blog: http://my.oschina.net/buru - bruce sha's baidu space: http://hi.baidu.com/iburufancybox: true #是否开启fancybox效果duoshuo_shortname: buru #多说账号google_analytics:rss: 更新主题12cd themes/modernistgit pull 主题其它使用配置及常见问题点此：NexT 使用文档 Hexo命令常用命令：12345hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHub 常用复合命令：12hexo deploy -ghexo server -g 简写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 至此，基本操作介绍完毕，以下内容普通用户无需了解。目录介绍默认目录结构：1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json .deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 _drafts：草稿文章 _posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 接下来是重头戏_config.yml，做个简单说明：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Hexo Configuration## Docs: http://zespia.tw/hexo/docs/configure.html## Source: https://github.com/tommy351/hexo/# Site #整站的基本信息title: 不如 #网站标题subtitle: 码农，程序猿，未来的昏析师 #网站副标题description: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到author: bruce #网站作者，在下方显示email: bu.ru@qq.com #联系邮箱language: zh-CN #语言# URL #域名和文件结构## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://ibruce.info #你的域名root: /permalink: :year/:month/:day/:title/tag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/code# Writing #写文章选项new_post_name: :title.md # File name of new postsdefault_layout: post #默认layout方式auto_spacing: false # Add spaces between asian characters and western characterstitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabmax_open_file: 100multi_thread: truefilename_case: 0render_drafts: falsehighlight: #代码高亮 enable: true #是否启用 line_number: false #是否显示行号 tab_replace:# Category &amp; Tag #分类与标签default_category: uncategorized # defaultcategory_map:tag_map:# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突## 2: Enable pagination## 1: Disable pagination## 0: Fully Disablearchive: 1category: 1tag: 1# Server #本地服务参数## Hexo uses Connect as a server## You can customize the logger format as defined in## http://www.senchalabs.org/connect/logger.htmlport: 4000logger: truelogger_format:# Date / Time format #日期显示格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: MMM D YYYYtime_format: H:mm:ss# Pagination #分页设置## Set per_page to 0 to disable paginationper_page: 10 #每页10篇文章pagination_dir: page# Disqus #社会化评论disqus，我使用多说，在主题中配置disqus_shortname:# Extensions #插件，暂时未安装插件## Plugins: https://github.com/tommy351/hexo/wiki/Plugins## Themes: https://github.com/tommy351/hexo/wiki/Themes## 主题theme: modernist # raytaylorism # pacman # modernist # lightexclude_generator:# Deployment #部署## Docs: http://zespia.tw/hexo/docs/deploy.htmldeploy: type: github repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库 修改局部页面页面展现的全部逻辑都在每个主题中控制，源代码在hexo\themes\你使用的主题\中，以Next主题为例：123456789101112131415161718.├── languages #多语言| ├── default.yml #默认语言| └── zh-CN.yml #中文语言├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _partial #局部的布局，此目录下的*.ejs是对头尾等局部的控制| └── _widget #小挂件的布局，页面下方小挂件的控制├── source #源码| ├── css #css源码 | | ├── _base #*.styl基础css| | ├── _partial #*.styl局部css| | ├── fonts #字体| | ├── images #图片| | └── style.styl #*.styl引入需要的css源码| ├── fancybox #fancybox效果源码| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道 更新更新hexo：1npm update -g hexo 更新主题：12cd themes/你的主题git pull 更新插件：1npm update 换机器你要保留好自己的博客源码。请查看我的另一篇博文。多台电脑维护hexo博客 本文转自—-不知-hexo你的博客。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>命令</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多台电脑维护hexo博客]]></title>
    <url>%2F2016%2Fhexo-gaidong.html</url>
    <content type="text"><![CDATA[安装hexo1npm install -g hexo-cli 安装 Hexo 完成后请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下：12345678910.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes_config.yml 网站的 配置 信息，您可以在此配置大部分的参数。如：1234deploy: type: git repository: git@git.coding.net:xxx/xxx.git branch: master 此时，hexo g hexo s 启动服务，打开： http://localhost:4000/ 能在本地正常显示网页。 首次安装hexo结束，以下为备份。 部署到远程仓库修改好所有博客设置,文章写好后 hexo g 部署，接着hexo d push到远程maste分支，并开启coding-pages功能稍等片刻就能看到博客。 备份博客源文件在本地博客根目录打开git bash git init后123456789git remote add origin &lt;远程项目地址&gt;git checkout -b coding-pages分支git add -A git commit -m "提交"git push origin coding-pages 此时备份到coding-pages分支成功 在另一台电脑写博备份操作。某盘下：打开git bash键入1git clone &lt;远程博客地址&gt; &lt;本地文件夹名&gt; 当前默认为master分支，也就是hexo编译后的静态博客。 切换到coding-pages分支。 12git branch -a git checkout coding-pages 输入以下指令： 123456789npm install -g hexo-cli # 安装hexonpm install # 安装依赖包npm install hexo-deployer-git # 用git部署插件（记得，不需要hexo init这条指令）。npm install hexo-generator-feed --save RSS插件 输入 12hexo g hexo s 打开： http://localhost:4000/ 博客又完整回来了，神奇吧。。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>命令</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用命令笔记]]></title>
    <url>%2F2016%2Fhexo-common.html</url>
    <content type="text"><![CDATA[hexo123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 简写12345hexo n "我的博客" == hexo new "我的博客" #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器12345678hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动12hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动 完成后部署两个命令的作用是相同的12345hexo generate --deployhexo deploy --generatehexo deploy -ghexo server -g 草稿1hexo publish [layout] &lt;title&gt; 模版123456789hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo new [layout] &lt;title&gt;hexo new photo "My Gallery"hexo new "Hello World" --lang tw 变量 描述 layout 布局 title 标题 date 文件建立日期 12345678title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。 模版（Scaffold）1hexo new photo "My Gallery" 变量 描述 layout 布局 title 标题 date 文件建立日期 设置文章摘要以上是文章摘要 &lt;!--more--&gt;以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 推送到服务器上123hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何删除 Master 分支]]></title>
    <url>%2F2016%2Fdel-master.html</url>
    <content type="text"><![CDATA[为什么要删除 master 分支当你在创建一个新的仓库的时候没有指定分支的话，Git 会默认创建 master 分支并指定它为默认分支。一般情况下使用 master 分支作为整个项目的核心分支是很普遍的行为，而 Pages 服务之所以使用 gitcafe-pages 分支的方式区别项目文件和 Pages 文件。这样你就可以在一个仓库中保存他们而且彼此不会有任何影响。但是像是个人主页类的 Pages 服务或其他一些应用场合，可能并不需要 master 的存在，甚至必须要删除它，或者只是你有洁癖┑(￣Д ￣)┍那么你就需要如下的方法来删除 master 分支。 如何删除你的 master 分支首先，删除你在本地的 master 分支，你需要首先切换到一个另一个分支上，如果没有可以新建一个： git branch gitcafe-pagesgit checkout gitcafe-pagesgit branch -D master 为了删除远端的 master 分支，可以运行命令： git push origin :master 而你很有可能会得到这样一个错误提示： 123456789101112remote: error: By default, deleting the current branch is denied, because the nextremote: error: 'git clone' won't result in any file checked out, causing confusion.remote: error:remote: error: You can set 'receive.denyDeleteCurrent' configuration variable toremote: error: 'warn' or 'ignore' in the remote repository to allow deleting theremote: error: current branch, with or without a warning message.remote: error:remote: error: To squelch this message, you can set it to 'refuse'.remote: error: refusing to delete the current branch: refs/heads/coding-pagesTo git@git.condin.net:ranmocy/ranmocy.git ! [remote rejected] gitcafe-pages (deletion of the current branch prohibited)error: failed to push some refs to 'git@coding.net:ranmocy/ranmocy.git' 这是因为 coding 需要指定一个默认分支，并在你访问这个项目页面的时候默认显示这个分支的代码。这个时候我们就需要提交另外一个分支到远端： git push origin gitcafe-pages 并在项目管理页面中，将“默认分支”选项，设置为除 master 以外的分支上： 这样，我们就可以使用正确删除远端的 master 分支了： git push origin :master]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>分支</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删除掉没有与远程分支对应的本地分支]]></title>
    <url>%2F2016%2Fdel-branch-fetch.html</url>
    <content type="text"><![CDATA[假设这样一种情况： 我创建了本地分支b1并pull到远程分支 origin/b1； 其他人在本地使用fetch或pull创建了本地的b1分支； 我删除了 origin/b1 远程分支； 其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？ 使用下面的代码查看b1的状态： $ git remote show origin * remote origin Fetch URL: git@github.com:xxx/xxx.git Push URL: git@github.com:xxx/xxx.git HEAD branch: master Remote branches: master tracked refs/remotes/origin/b1 stale (use &apos;git remote prune&apos; to remove) Local branch configured for &apos;git pull&apos;: master merges with remote master Local ref configured for &apos;git push&apos;: master pushes to master (up to date) 这时候能够看到b1是stale的，使用 git remote prune origin 可以将其从本地版本库中去除。 更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：git fetch -p]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>分支</tag>
        <tag>git-fetch</tag>
      </tags>
  </entry>
</search>